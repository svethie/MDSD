modeltype crudapp "strict" uses crudApp4Dsl('http://www.wwu.de/pi/mdsd4/crudapp/CrudApp4Dsl');
transformation CrudDslToDSLTransformation(inout model : crudapp);

main() {
	model.objectsOfType(Package) -> map toPackage();
}



mapping inout crudapp::Package::toPackage() {
	init {
	//doesn't work
	self.windows += self.entities -> map toEntryWindow();
	//self.windows -> map toChangeName();
	}
}

// works
mapping inout crudapp::Window::toChangeName()  {
	self.name := "test";
}


mapping inout crudapp::Entity::toEntryWindow(): crudapp::EntryWindow {
	result.name := self.name + "Form";
	result.entity := self;
	result.title := self.name;
	result.columns := 2;
		
	// map attributes
	result.rows += self.properties[crudapp::Attribute] -> map attributesToRows();
	
	// create Button
	result.rows += object crudapp::Row {
		name:="rowButton";
		elements+= object crudapp::Button{
			name:="buttonCreateEdit";
			action := Action::CREATE_EDIT;
			text:=Action::CREATE_EDIT.toString();
			}
	};
	
	// map references (BUT unsorted)
	//result.rows += self.properties[crudapp::Reference] -> map ReferencesToRows();
	
	/*
	//map References
	var _properties := self.properties[crudapp::Reference];
	_properties->forEach(p){
		// map single-valued references
		p -> map ReferencesToRows();
			
			
		}if (p.multiplicity=Multiplicity::ONE) then{ 
	    	p -> map singleReferencesToRows();
	    }endif;
    	
    	// map optional-valued references
	    if (p.multiplicity=Multiplicity::OPTIONAL) then{ 
	    	p -> map singleReferencesToRows();
	    }endif;
    	// map multi-valued references
	    if (p.multiplicity=Multiplicity::MANY) then{ 
	    	p -> map singleReferencesToRows();
	    }endif;
	   
    } */
}


// map attributes
mapping inout crudapp::Attribute::attributesToRows(): crudapp::Row {
	name := "row" + self.name;
	elements += self -> map createField();
}

// map Fields
mapping inout crudapp::Attribute::createField(): crudapp::Field {
	name := "field" + self.name;
	_property := self;
	label := object crudapp::FieldLabel {text:= self.name};
}



// map reference
mapping crudapp::Reference::ReferencesToRows(): crudapp::Row {
	name := "row" + self.name;
	elements += self -> map createFieldForReference();
}

// map reference Fields
mapping inout crudapp::Reference::createFieldForReference(): crudapp::Field {
	name := "field" + self.name;
	_property := self;
	label := object crudapp::FieldLabel {text:= self.name};
}


