modeltype crudapp "strict" uses crudApp4Dsl('http://www.wwu.de/pi/mdsd4/crudapp/CrudApp4Dsl');
transformation CrudDslToDSLTransformation(inout model : crudapp);

// entry point for transformation is package
main() {
	model.objectsOfType(Package) -> map toPackage();
}

// map package
mapping inout crudapp::Package::toPackage() {
	init {
	// works fine, but missing check for already available EntryWindows
	//self.windows += self.entities -> map toEntryWindow();
	
	// Following approach is better and works:
	// Check whether there is already an Entry Window of name beginning with entity name
	// If not, map entity to new EntityWindow			
	self.entities->forEach(e){
		self.windows[crudapp::EntryWindow] ->forEach(w){
			if (w.entity = e) then {
			} else {
				self.windows += e -> map toEntryWindow();
			}endif;
		};
	};	
	}
}


// map entity to EntryWindow
mapping inout crudapp::Entity::toEntryWindow(): crudapp::EntryWindow {
	result.name := self.name + "Form";
	result.entity := self;
	result.title := self.name;
	result.columns := 2;
		
	// map attributes
	result.rows += self.properties[crudapp::Attribute] -> map propertiesToRows();
	
	// create Button
	result.rows += object crudapp::Row {
		name:="rowButton";
		elements+= object crudapp::Button{
			name:="buttonCreateEdit";
			// Action is not properly displayed, for whatever reason
			action := crudapp::Action::CREATE_EDIT;
			text:=Action::CREATE_EDIT.toString();
			}
	};
			
	//map References
	var propertiesTEMP := self.properties[crudapp::Reference];

	// map single-valued references	
	propertiesTEMP->forEach(p){
		// map single-valued references	
		if (p.multiplicity=Multiplicity::ONE) then{ 
	    	result.rows += p -> map propertiesToRows();
	    }endif;
	};	
	
	// map optional-valued references	
	propertiesTEMP->forEach(p){	
		if (p.multiplicity=Multiplicity::OPTIONAL) then{ 
	    	result.rows += p -> map propertiesToRows();
	    }endif;
	};
	
	// map multi-valued references
   	propertiesTEMP->forEach(p){	     	
	    if (p.multiplicity=Multiplicity::MANY) then{ 
	    	result.rows += p -> map propertiesToRows();
	    }endif; 	
    };
}


// map properties
mapping inout crudapp::Property::propertiesToRows(): crudapp::Row {
	name := "row" + self.name;
	elements += self -> map createField();
}

// map Fields
mapping inout crudapp::Property::createField(): crudapp::Field {
	name := "field" + self.name;
	_property := self;
	label := object crudapp::FieldLabel {text:= self.name};
}
